--@diagnostic disable:  undefined-global, undefined-field

local gravity = -20
local jump_takeoff_speed = 900
local timer_enabled = true
local frequency = 1.2
local reset_timer = 1 / frequency

function init(self)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3(0,0,0)
	self.position = go.get_position()
	msg.post("#", "reset")
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		local anim_props = { blend_duration = 0.15 }
		spine.play_anim("#spinemodel", anim, go.PLAYBACK_LOOP_FORWARD, anim_props)
		self.anim = anim
	end
end

local function update_animation(self)
	if self.ground_contact then
		play_animation(self, hash("run"))
	else
		play_animation(self, hash("jump"))
	end
end

function update(self, dt)

	if timer_enabled then
		reset_timer = reset_timer - dt
	end
	if reset_timer < 0 then
		
		msg.post("level:/score#score", "reset_score")
		self.velocity = vmath.vector3(0,0,0)
		self.correction = vmath.vector3()
		self.ground_contact = false
		self.anim = nil
		go.set(".", "euler.z", 0)
		go.set_position(self.position)
		msg.post("#collisionobject", "enable")
		
		reset_timer = 1 / frequency
		timer_enabled = false
	end

	if not timer_enabled then
		local gravity = vmath.vector3(0, gravity, 0)

		if not self.ground_contact then
			self.velocity = self.velocity + gravity
		end

		go.set_position(go.get_position() + self.velocity * dt)

		update_animation(self)

		self.correction = vmath.vector3()
		self.ground_contact = false
	end
end

local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	
	if message_id == hash("reset") then
		timer_enabled = true
	elseif message_id == hash("contact_point_response") then
		
		if message.group == hash("danger") then
			go.set_position(go.get_position(), "death_fx")
			particlefx.play("level:/death_fx#death")
			play_animation(self, hash("death"))
			msg.post("#collisionobject", "disable")
			go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,
			function()
				msg.post("controller#controller", "reset")
			end)
		elseif message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("pickup") then
			msg.post("level:/score#score", "add_score")
		end

	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
	end
end

local function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end
